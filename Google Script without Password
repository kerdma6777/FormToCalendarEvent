var emailSent = "SENT";

/**
 * A function that creates a trigger such that everytime that a Google Form is submitted to this Spreadsheet the createEvent function is called
 *
 * @customfunction
 */
function createTrigger ()
{
   var ss = SpreadsheetApp.getActive (); //get the spreadsheet that this script is added to
  ScriptApp.newTrigger('createEvent')
      .forSpreadsheet(ss)
      .onFormSubmit()
      .create();
}

/**
 * A function that takes information from the spreadsheet and creates corresponding calendar event
 *
 * @customfunction
 */
function createEvent (e) {
  var ss = SpreadsheetApp.getActiveSpreadsheet (); //get the spreadsheet that this script is added to
  var sheet = ss.getSheets ()[0]; //get the first sheet 
  var beginRow = 2; //don't read in the labels, so begin on row 2
  var numRow = sheet.getLastRow();
  var dataRange = sheet.getRange(beginRow, 1, numRow, 9)//row, col, numRow, numCol
  var data = dataRange.getValues();
  var calendar = CalendarApp.getCalendarsByName("MyCalendarName")[0]; //get a list of calendars with the name "MyCalendarName" and stores the first calendar
  for (var x=0; x<data.length; ++x) { 
    var row = data [x];
    var startTime = row [1]; //row[0] is the timestamp of the form, so user-entered information begins in row[1]
    var endTime = row [2];
    var name = row [3];
    var email = row [4];
    var phoneNum = row [5];
    var hasEmailSent = row [6];
    if (hasEmailSent != emailSent){ //email hasn't yet been sent
      var event = calendar.createEvent (name, new Date (startTime), new Date (endTime), {description: phoneNum + name}); //creates event with title, start, end, description
      if (isOverlapping (event, startTime)){ //if the event is overlapping another event
        event.deleteEvent ();
        MailApp.sendEmail(email, "Unable to Reserve Conference Room", "We apologize for the inconvience, but the conference room you attempted to schedule is already booked during the time frame indicated.  We are unable to confirm your reservation.  Please call the front desk (410-313-6550) with any questions. ");
        sheet.getRange (x+beginRow, 8, 1, 1).setValue("SENT");//row, col, numRow, numCol
      }
      else{ //there is no overlapping event
        MailApp.sendEmail(email, "Conference Room Successfully Reserved", "Your request to reserve a conference room has been successfully processed.  If for any reason you need to delete or change your reservation, please call the front desk (410-313-6550).");
        sheet.getRange (x+beginRow, 7, 1, 1).setValue("SENT");//row, col, numRow, numCol
      }
      }
      SpreadsheetApp.flush();//updates spreadsheet so that the send column is up to date
 }   
}

 /**
 * A function that determines if an event overlaps with any other event
 * @param event is the event created from the information entered into the sheet
 * @param date is the date that the event is held
 * @return true if there is an overlap; false otherwise 
 * @customfunction
 */
function isOverlapping(event, date){
  var calendar = CalendarApp.getCalendarsByName("MyCalendarName")[0];
    var meetings = calendar.getEventsForDay (new Date (date)); //even if the date has a time, the entire day's events are stored
  var numOverlaps = 0;
    for(var a =0; a<meetings.length; ++a){
      //checks that the new event's end time is before the start time of all other meetings
      //checks that the new event's start time is after the end time of all other meetings
      //checks that the Id of the event is unique (it won't be compared to itself)
            if((!(meetings[a].getStartTime() >= event.getEndTime() || meetings[a].getEndTime ()<= event.getStartTime ()))&& !(meetings[a].getId().equals(event.getId())))
            {
               numOverlaps++;
            }
        }
  if (numOverlaps==0){//there are no overlaps
    return false;
  }
  else{
    return true;
  }
}
  
